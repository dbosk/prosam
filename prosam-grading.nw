\section{Overview}

This is the documented source code of my grading scripts for the prosam course.
These scripts provide a streamlined workflow for grading in the course.
The scripts use as input the files given by Viggo for each period's 
assignments.

To use them, one copies [[common.sh]] into a directory specific for the period.
One edits [[common.sh]] to ensure it's the right course, period and set of 
groups.
Then one simply runs [[../reflektion.sh]] and [[../seminarium.sh]] from that 
directory and follows the instructions.

In essence, what happens is that the script will remind us which CSV files to 
get from where.
In summary:
\begin{itemize}
\item Download the participation list from Zoom for the online seminar.
\item Download the filled Avprickningslista sheet from Viggo's spreadsheet.
  Or use [[prosammail.py]] to read the mailbox for the campus seminar.
  ([[prosammail.py]] requires the Python packages [[pypandoc]] and [[typer]] to 
  be installed.)
\item Download the Kommentarer sheet from Viggo's spreadsheet.
\end{itemize}
Then it will report participation in the seminars.
It will also generate a script with maximum scores prefilled for the reflection 
assignment.
One only fills the comments and potentially adjusts the scores.
When done, run the script to report everything to Canvas.


\section{Building the scripts}

We provide the build script [[<<Makefile>>]] to build the files.
To generate [[Makefile]] the first time, we must run
\begin{verbatim}
  notangle -RMakefile -t2 prosam-grading.nw > Makefile
\end{verbatim}
To be able to use [[Makefile]], we first must clone the makefiles needed into 
the current working directory:
\begin{verbatim}
  git clone https://github.com/dbosk/makefiles.git
\end{verbatim}

We need the [[noweb.mk]] file from the [[makefiles]] framework.
Note that we must include [[noweb.mk]] before (unlike last, which is normal) 
because our recipes will make use of the [[NOTANGLE]] and [[NOWEAVE]] 
variables, not just the pattern matching rules that already exist in 
[[noweb.mk]].
And those variables don't exist until after the inclusion, so if we would 
include at the end, all our targets would get empty recipes.
<<Makefile>>=
SCRIPTS=    common.sh reflektion.sh seminarium.sh
SCRIPTS+=   prosammail.py

.PHONY: all
all: prosam-grading.pdf ${SCRIPTS}

INCLUDE_MAKEFILES=./makefiles
include ${INCLUDE_MAKEFILES}/noweb.mk

<<target for Makefile>>
<<target for documentation>>
<<target for files>>

.PHONY: clean
clean:
	<<cleaning for documentation>>
	<<clearning for files>>
@

Since we document [[<<Makefile>>]] here, we must also have a target that 
produces it, so that [[make]] can remake it.
<<target for Makefile>>=
Makefile: prosam-grading.nw
	${NOTANGLE.mk}
@

We use the simple documentation, without any LaTeX preamble.
This means we want to compile using [[NOWEAVE.pdf]] instead of the default 
[[NOWEAVE.tex]].
They use different arguments to [[noweave]] making Noweb generate the LaTeX 
preamble for us.
But this also means that we must clean the LaTeX files ourselves.
We add [[prosam-grading.tex]] as an intermediate, to not have to run [[clean]] 
to remake.
<<target for documentation>>=
.INTERMEDIATE: prosam-grading.tex
prosam-grading.pdf: prosam-grading.nw
	${NOWEAVE.pdf}
<<cleaning for documentation>>=
${RM} prosam-grading.tex prosam-grading.aux prosam-grading.fdb_latexmk
${RM} prosam-grading.fls prosam-grading.log prosam-grading.pdf
@

Finally, the main files, the executable scripts:
We simply tangle them.
But since we tangle them from a file with a different name, we must specify the 
recipe as no pattern rules will match.
<<target for files>>=
${SCRIPTS}: prosam-grading.nw
	${NOTANGLE}
	chmod +x $@
<<clearning for files>>=
${RM} ${SCRIPTS}
@


\section{Common variables and functions}

The files [[reflektion.sh]] and [[seminarium.sh]] both sources the file 
[[common.sh]], which contains common variables and functions.
The user will edit the variables in this file.
(We also keep the functions in [[<<common.sh>>]] instead of
[[<<common code and sourcing>>]] so that [[reflektion.sh]] can simply put a 
[[source common.sh]] in the script it will generate, to provide that script 
with the [[grade]] function.
More on this later.)
<<common.sh>>=
<<common variables>>
<<common functions>>
<<common code and sourcing>>=
#!/bin/bash
source common.sh
@

We can start with some of the common variables.
We need the course, a regex used by the [[canvaslms]] command.
We also need the period (to get the right assignment) and the groups (also a 
regex to match several groups).

The idea is that we update the variables in [[common.sh]] for every period.
Each period contains two assignments, the reflection and the seminar.
<<common variables>>=
COURSE="prosam22"
ROUND="2022/2023"
PERIOD="1"
GROUP="[789]"
@

Now the assignment is always named with ``Seminarium period'' (or ``Uppsats 
period'') as prefix and the actual period.
<<reflektion.sh>>=
<<common code and sourcing>>
ASSIGN="Uppsats period $PERIOD $ROUND"
<<seminarium.sh>>=
<<common code and sourcing>>
ASSIGN="Seminarium period $PERIOD $ROUND"
@

\subsection{Grading with the [[grade]] function}

The [[grade]] function can be used as follows:
\begin{center}
  [[grade user points msg]]
\end{center}
It requires the username, points (the grade) and a message as arguments.
The message is actually all remaining arguments.
It also requires the variables [[COURSE]] and [[ASSIGN]] to be set.

The construction is then very simple.
It uses [[canvaslms]] to set the grade and leave the message as a comment for 
the student.
It runs this as a background job.
But since we cannot run too many parallel requests to Canvas, we add a 
one-second sleep.
(This value of one second was found by trial and error.)
<<common functions>>=
grade() {
  user="$1"
  grade="$2"
  shift; shift
  msg="$*"

  echo $ASSIGN $user $grade
  canvaslms grade -c "$COURSE" -a "$ASSIGN" -u "$user" \
    -g "$grade" -m "$msg" \
    <<drop all missing [[login_id]] from stderr>> &
  sleep 1
}
@

Now, we want to drop all the `has no [[login_id]]` error messages from stderr, 
because in the prosam course they clutter a lot.
There is a nice technique called process substitution\footnote{
  See \texttt{https://unix.stackexchange.com/a/3657/43490} and
  \texttt{https://en.wikipedia.org/wiki/Process\textunderscore{}substitution}.
}.
This means that we can grep only stderr and keep it on stderr.
(This seemingly only works in Bash and ksh; the features originally appeared in 
ksh in 1988.)
The [[2>]] says we want to do this to stderr.
[[>(...)]] captures the output that would otherwise have gone to a file.
[[>&2]] puts it back into stderr.
<<drop all missing [[login_id]] from stderr>>=
2> >(grep -v "has no login_id" >&2)
@

\subsection{Listing students in groups with the [[group]] function}

The [[group]] function returns the students in the specified groups.
It can be used as follows:
\begin{center}
  [[group groupnums]]
\end{center}
The [[groupnums]] argument is actually a regex matching group numbers.
The function also requires the variable [[COURSE]] to be set.

The group assignment for prosam is actually an assignment, where the score is 
the group number.
Hence we use the [[canvaslms submissions]] to get the group numbers of the 
students.
We simply cut the relevant columns from the output and grep the groups numbers.
The key to grepping is to not get group numbers where the desired group number 
is a substring.

We also sort the students based on last name, since that's how Viggo sorts the 
students' reflections.
This makes grading faster.
<<common functions>>=
group() {
  group_num="$1"
  canvaslms submissions -c ${COURSE} -a Gruppnummer | cut -f 3-4 \
    | grep "[^0-9]${group_num}$" | cut -f 1 | sort -k 2 \
    <<drop all missing [[login_id]] from stderr>>
}
@


\section{The seminar assignment}

The seminar can be run both on campus and on Zoom.
The Zoom participation log can be extracted from Zoom as a CSV file.
The campus participation can be logged using Viggo's spreadsheet, where we can 
extract the tick-off sheet.
We save them into files names as follows.
<<common variables>>=
ZOOM="online.csv"
CAMPUS="campus.tsv"
@

An alternative is that the students send an email to the teacher at the end of 
the seminar.
The teacher picks a random sentence and asks the students to write that in the 
email.
They should also send it at reasonably the same time.
Then the teacher can read the mailbox and see who sent the email.
We can use [[prosammail.py]] to read the mailbox, so we have a variable to 
store the path to the mailbox.
<<common variables>>=
MAILBOX="~/mail/kth/INBOX"
@

This leaves us with the following structure for
[[<<seminarium.sh>>]].
Now, due to the construction of [[grade]], we also need to [[wait]] for all the 
[[canvaslms]] run in parallel.
<<seminarium.sh>>=
<<process online participants>>
<<process campus participants>>

echo "Waiting for all canvaslms calls to finish ..."
wait
@

\subsection{Process online participants}

Now, let's process the online participants.
We need the user to download the CSV export, so we add a quick reminder.
<<process online participants>>=
echo "Make sure ${ZOOM} is available, download it from"
echo "  Zoom -> Reports -> Usage Reports."
echo "Press return to continue."
read null
echo "Processing ..."
@

The second column of the CSV is the email address, we use that one to grade.
We set one point as grade since they actively participated.
(We want to skip the headers on the first row.)
<<process online participants>>=
for s in $(tail -n +2 $ZOOM | cut -f 2 -d,); do
  grade "$s" 1
done
@

\subsection{Process campus participants}

The process is the same for campus students, it's just a different file.
<<process campus participants>>=
echo "Make sure ${CAMPUS} is available, download it from Viggo's sheet."
echo "It's the Avprickningslista. Make sure it's separated by tabs,"
echo "not commas."
echo "Press return to continue."
read null
echo "Processing ..."
@

Now, the format of this file is as follows.
The sheet in Viggo's file hides all but the relevant columns.
This makes it easy to set a marker, an x or o, on the right student and the 
right assignment.
(Actually, we don't really care in which column we put that marker as long as 
it's on the right student.)
The exported TSV file, however, contains all the columns.

The first row of the exported file is a header, so we must remove that one.
The third column contains the KTH email address, we will use that identity for 
grading.
To tick students off, we put an ``x'' or an ``o'' in one of the assignment 
columns, those start at column 7.
This means we simply look for the lone x's and give those students a point.
<<process campus participants>>=
students=$(tail -n +2 $CAMPUS | cut -f 3,7- | \
  egrep "[^a-zA-Z@][xo][^a-zA-Z@]" | cut -f 1)

for s in $students; do
  grade "$s" 1
done
@

\subsection{Process campus participants with [[prosammail.py]]}

We can also use [[prosammail.py]] to read the mailbox for the campus seminar.
<<process campus participants>>=
echo "Will read the mailbox ${MAILBOX}."
echo "Press return to continue."
read null

students=$(prosammail.py $MAILBOX)
for s in $students; do
  grade "$s" 1
done
@

\subsubsection{Reading emails in the mailbox}

To tick the students off as present at the end of the seminar, I ask them to 
send an email to my email address.
The subject is always ``prosam'' or ``Prosam''.
The body is a randomly made up sentence that is hard enough to guess.
They have to send it at that time, since any delayed messages might have gotten 
the sentence relayed to them.

What we want to do here is to write a short script that reads the mailbox and 
outputs all the students who sent the email.
We want to double check the times, so we'll output a brief confirmation for 
each student.
We'll output that on stderr so that we can redirect stdout to a file or 
variable.
<<prosammail.py>>=
#!/usr/bin/env python3

import mailbox
import os
from pathlib import Path
import re
import typer
from typing import Annotated
<<additional imports>>

cli = typer.Typer()

<<CLI argument and option definitions>>
<<helper functions>>

@cli.command()
def main(mailbox_path: <<mailbox type and default value>>):
  """
  Reads the mailbox and outputs the students who sent the email.
  """
  maildir = mailbox.Maildir(mailbox_path, create=False)
  maildir.lock()

  <<[[msg]] iteration variables>>
  for key, msg in maildir.iteritems():
    <<check if we should process [[msg]] or continue>>
    <<process [[msg]] if it's a prosam message>>
    <<use [[key]] to mark [[msg]] as processed>>

  maildir.flush()
  maildir.unlock()
  maildir.close()

if __name__ == "__main__":
  cli()
<<mailbox type and default value>>=
Annotated[Path, mailbox_arg] = f"{os.environ['HOME']}/mail/kth/INBOX"
<<CLI argument and option definitions>>=
mailbox_arg = typer.Argument(help="The path to the Maildir mailbox.")
@

Now, on to the processing of the messages.
We first check the subject line.
We check that the subject is either ``prosam'' or ``Prosam'', not that 
``prosam'' is a substring of the subject.
There are other messages where ``prosam'' is a substring of the subject, but 
not the other way around.
If the user did everything correctly, we print their username.
However, sometimes they complement it by replying to their old message, so we 
also want to cover prefixes of ``Re:'' and ``Sv:''.
<<check if we should process [[msg]] or continue>>=
<<continue if [[msg]] is already processed>>
if subject_pattern.match(msg['subject']) is None:
  continue
<<[[msg]] iteration variables>>=
subject_pattern = re.compile(r"(Re|Sv)?:?\s*(Prosam)\s*$", re.IGNORECASE)
@

Now that we know that [[msg]] is indeed a prosam message, we can try to process 
it.
The processing takes a few steps.
But if everything checks out, we should print the student's username to stdout.
<<process [[msg]] if it's a prosam message>>=
<<let [[body]] be the body of [[msg]]>>
<<let [[user]] be the student's username>>
<<check that they wrote the right phrase in [[body]], or continue>>

print(user)
@

\paragraph{Which student is it?}

We want the students' KTH email address, to get their username.
The way we'll do this is to first check for a KTH email in the body.
If we can't find anything there, we'll check the from field.

The reason we do this in this order, is that in some cases, we as the course 
leader send the email to ourselves containing the student's email.
With this order, we'll find the student's email, not our own.
In the other cases, we won't find any email address in the body, so then we'll 
find the sender's address in the from field.
<<[[msg]] iteration variables>>=
email_pattern = re.compile(r"(\w+)\\?@\w*\.?kth\.se")
<<let [[user]] be the student's username>>=
<<add all usernames from [[body]] to [[user]]>>
if not user:
  <<let [[user]] be the sender's email address>>
@

When we try to find the address in the body, we want to look for all addresses.
This is because, for those students who don't have a phone that they can use to 
send an email at the seminar, the teacher can note them in an email and send it 
to themself.
Then it's nice to just have one email and not several.
<<add all usernames from [[body]] to [[user]]>>=
user = " ".join(email_pattern.findall(body))
<<let [[user]] be the sender's email address>>=
try:
  user = email_pattern.search(msg['from']).group(1)
except:
  continue
@

\paragraph{Did they write the correct phrase?}

We don't need to know which phrase they're supposed to write.
We'll take another approach.
For each prosam email, we'll print who sent it, date and the body and ask for 
confirmation.
We need to use stderr for this, since we want to print the results to stdout to 
be piped into another program.

We'll print who sent it, that is [[from]] instead of [[user]].
Sometimes we send this email ourselves, just containing the student's email.
We want to detect that easily.
<<check that they wrote the right phrase in [[body]], or continue>>=
<<let [[date]] be the date of [[msg]]>>
sender = email_pattern.search(msg['from']).group(1)
if sender != user:
  print(f"{sender} ({user}) {date}:\n{body}", file=sys.stderr)
else:
  print(f"{user} {date}:\n{body}", file=sys.stderr)

choices = ["y", "yes", "n", "no"]
print(f"Does that look correct? {choices}", end=' ', file=sys.stderr)
if input_choice(choices) not in ['y', 'yes']:
  continue
<<helper functions>>=
def input_choice(choices):
  while True:
    choice = input().casefold()
    if choice in choices:
      return choice
    print(f"Please choose one of {choices}", end=' ', file=sys.stderr)
<<additional imports>>=
import sys
@

\paragraph{Reading out [[body]] and [[date]]}

We need to read out the body and date of [[msg]].
The date is easy.
<<let [[date]] be the date of [[msg]]>>=
date = msg['date']
@

For the body, we need to take into consideration if it's a multipart message.
We also need to consider the format.
<<let [[body]] be the body of [[msg]]>>=
if not msg.is_multipart():
  body = get_decoded_body(msg.get_payload(decode=True), msg.get_charsets())
else:
  body = ""
  for part in msg.get_payload():
    try:
      body += get_decoded_body(part, msg.get_charsets())
      body += "\n"
    except: continue
  if not body:
    continue
body = body.strip()
<<helper functions>>=
def get_decoded_body(payload, charsets):
  for charset in charsets:
    try:
      body = payload.decode(charset)
    except: continue
    else: break
  else:
    raise Exception("Could not decode body")

  if "html" in body or "div" in body:
    body = pypandoc.convert_text(body, "plain", format="html")
  return body
<<additional imports>>=
import pypandoc
@

\paragraph{Marking [[msg]] as processed}

We want to mark [[msg]] as processed.
We do this by marking the email as read.
However, we must do this with the Maildir object ([[maildir]]), it's not 
sufficient to do it with only the message ([[msg]]).
We use the [[__setitem__]] method of the Maildir object to update the message.
These methods require the key of the message, [[key]].

To mark the message as read, we simply move it to the [[cur]] subdirectory and 
add the [[S]] flag.
<<use [[key]] to mark [[msg]] as processed>>=
msg.set_subdir("cur")
msg.add_flag("S")
maildir[key] = msg
<<continue if [[msg]] is already processed>>=
if "S" in msg.get_flags():
  continue
@


\section{The reflection assignment}

The reflection assignment consists of two parts:
\begin{enumerate}
\item Writing a reflective essay.
\item Providing peer feedback to at least six other students' essays.
\end{enumerate}
Then the teacher should also grade each essay.

We get the peer feedback in a spreadsheet from Viggo.
From that we can generate a file that can be used to grade the essays.
The file generated is a script that should be run after grading to set the 
grades and provide the feedback back to the students.
<<common variables>>=
FEEDBACK="feedback.tsv"
ESSAY_OUTPUT="reflektion-results.sh"
@

One can only achieve the full points (2) if one has commented on at least six 
other students' essays.
Otherwise, one can at most get one point.
<<reflektion.sh>>=
echo "Will clear $ESSAY_OUTPUT."
echo "Get ${FEEDBACK} from Viggo's sheet (kommentarer)."
echo "Press return to continue"
read null
echo "Processing ..."

<<prepare the essay output file>>

<<for each student in the groups>>
do
  <<count the number of comments for student>>
  if [ "$comments_count" -gt 5 ]; then
    <<write start of grade line for student with full points>>
  else
    <<write start of grade line for student with too few comments>>
  fi
  <<add all comments from the other students>>
  <<write termination line for student>>
done

echo 'echo "Waiting for all canvaslms calls to finish ..."' >> $ESSAY_OUTPUT
echo wait >> $ESSAY_OUTPUT

echo "Now edit $ESSAY_OUTPUT and then run 'bash ./$ESSAY_OUTPUT'."
@

Now, to iterate through the students, we must go through a list of names 
(containing spaces).
Hence, we should modify [[IFS]].
We use the [[group]] function from above to filter out the students of the 
relevant groups.
<<for each student in the groups>>=
oldIFS="$IFS"
IFS=$'\n'
for student in $(group $GROUP | sed "s/\r//")
@

The name of the results file is kept in the variable [[ESSAY_OUTPUT]].
This file should source [[common.sh]] to get the [[grade]] function and, 
consequently, it must have the [[ASSIGN]] variable set to the name of the 
assignment.
<<prepare the essay output file>>=
(echo "source common.sh"; echo "ASSIGN=\"$ASSIGN\""; echo) > "$ESSAY_OUTPUT"
@

After that, each student get a line containing the [[grade]] command.
Something like this:
\begin{verbatim}
  grade "Student Studentsson" points \
  "
  Bra reflektion!

  feedback 1

  feedback 2

  ...

  feedback 6
  "
\end{verbatim}
This way, the teacher grading can see what feedback the student received.

Students who gave more than five comments (that is, at least six comments), get 
the full points (2).
Students who had too few comments get 0 points according to the grading 
criteria.
<<write start of grade line for student with full points>>=
(echo "grade \"$student\" 2 \\"; echo '"') >> $ESSAY_OUTPUT
<<write start of grade line for student with too few comments>>=
(echo "grade \"$student\" 0 \\"; echo '"') >> $ESSAY_OUTPUT
<<write termination line for student>>=
(echo '"'; echo) >> $ESSAY_OUTPUT
@

The format of the feedback table is also extensive.
The spreadsheet from Viggo has hidden columns.
We are interested in the name of who gave the feedback (column 2) and who 
received the feedback (column 5).
We are also interested in the actual feedback (column 11).

Thus we count how many times the student's name occurred in the second column.
We also print this for the user running the script.
<<count the number of comments for student>>=
comments_count=$(cut -f 2 $FEEDBACK | grep "$student" | wc -l)
echo $ASSIGN $student $comments_count comments
@

And we simply take lines that starts with the student's name in the fifth 
column (who received the feedback) together with the feedback (column 11).
We then add an extra newline to separate the comments for readability.
<<add all comments from the other students>>=
(echo "Bra reflektion!"; echo) >> $ESSAY_OUTPUT
cut -f 5,11 $FEEDBACK \
  | grep "^$student" \
  | cut -f 2 \
  | sed "s/$/\n/" \
  >> $ESSAY_OUTPUT

